#!/bin/bash
spin() {
    i=1
    while true; do
        sleep 1
        printf "\r$1: %d" ${i}
        i=$((i + 1))
        wait
    done
}

RED='\033[0;31m'
NC='\033[0m'
FOLDER=""
GIT=""
GIT_USER=""
GIT_PASS=""
DATABASE=""
AUTH_FILE=""
PHP_VERSION=""
DB_IMAGE=""
IS_MAGENTO=""
OWN_GROUP=""
XDEBUG=""

until sudo -lS &>/dev/null <<EOF; do
$password
EOF
    printf "Enter password for %s: " "${USER}"
    IFS= read -rs password
done

echo
read -p "Enter project path root: " -e -r FOLDER
if [ -z "${FOLDER}" ]; then
    FOLDER=$(pwd)
fi

read -p "Own Group: " -e -i "www-data" -r OWN_GROUP
if [ -z "${OWN_GROUP}" ]; then
    OWN_GROUP=www-data
fi

if [ ! -e "${FOLDER}/src/.git" ]; then
    read -p "GIT URL (Empty is not clone): " -e -r GIT
fi

if [ -n "${GIT}" ] && [[ "${GIT} == *"http"" ]];then
    read -p "GIT Username: " -e -r GIT_USER
    while [ -z "${GIT_USER}" ]; do
        printf "%sUsername is required!%s" "${RED}" "${NC}"
        read -p "GIT Username: " -e -r GIT_USER
    done

    read -p "GIT Password: " -e -r GIT_PASS
    while [ -z "${GIT_PASS}" ]; do
        printf "%sPassword is required!%s" "${RED}" "${NC}"
        read -ps "GIT Password: " -e -r GIT_PASS
    done

    GIT="${GIT:0:8}${GIT_USER}:${GIT_PASS}@${GIT:8}"
fi

read -p "Custom auth.json File (Empty is default on git): " -e -r AUTH_FILE
while [ -n "${AUTH_FILE}" ] && [ ! -e "${AUTH_FILE}" ]; do
    printf "%s${AUTH_FILE} is not file!%s" "${RED}" "${NC}"
    read -p "Custom auth.json File (Empty is default on git): " -e -r AUTH_FILE
done

read -p "DATABASE (Empty is skip import database): " -e -r DATABASE
while [ -n "${DATABASE}" ] && [ ! -e "${DATABASE}" ]; do
    printf "%s${DATABASE} is not file!%s" "${RED}" "${NC}"
    read -p "DATABASE (Empty is skip import database): " -e -r DATABASE
done

read -p "Is Magento Project: " -e -i "true" -r IS_MAGENTO

if [ -z "${IS_MAGENTO}" ]; then
    IS_MAGENTO=true
fi

read -p "PHP Version(Empty is latest image support version: 7.0 - 8.0): " -e -i "7.3" -r PHP_VERSION
if [ -z "${PHP_VERSION}" ]; then
    PHP_VERSION=latest
fi
if [ "${PHP_VERSION}" != "latest" ]; then
    phpnumber="${PHP_VERSION/./""}"
    if [ $phpnumber -lt 70 ] || [ $phpnumber -gt 74 ]; then
        PHP_VERSION="latest"
    fi
fi

read -p "Mysql Image: " -e -i "mysql:5.7" -r DB_IMAGE
if [ -z "${DB_IMAGE}" ]; then
    DB_IMAGE=mysql:5.7
fi

mkdir -p "${FOLDER}"
mkdir -p ~/composer
cd "$FOLDER" && echo

init-doco "${FOLDER}"

if grep -qEi "(Microsoft|WSL)" /proc/version &> /dev/null ; then
    XDEBUG="xdebug\.remote_host=host\.docker\.internal"
fi

sed -i "s/!PHP_VERSION!/${PHP_VERSION}/g" "${FOLDER}/docker-compose.yml"
sed -i "s/!DB_IMAGE!/${DB_IMAGE}/g" "${FOLDER}/docker-compose.yml"
sed -i "s/!IS_MAGENTO!/${IS_MAGENTO}/g" "${FOLDER}/docker-compose.yml"
sed -i "s/!XDEBUG!/${XDEBUG}/g" "${FOLDER}/docker-compose.yml"


echo
if [ -n "$GIT" ]; then
    spin 'Clone code' &
    pid=$!
    git clone "$GIT" "${FOLDER}/src" 2>/dev/null
    kill ${pid}
fi

if [ -n "${AUTH_FILE}" ]; then
    cp "${AUTH_FILE}" "${FOLDER}/src/"
fi

echo
spin 'Docker Compose Starting' & pid=$!
doco up -d --remove-orphans 2>/dev/null
kill ${pid}

echo
spin 'Composer Install Module' & pid=$!
composer install 2>/dev/null
kill ${pid}

permission "$FOLDER" "$OWN_GROUP"

if [ -n "$DATABASE" ]; then
    spin 'Database Importing' &
    pid=$!
    mysql-import DATABASE root local local 2>/dev/null
    kill ${pid}
fi

if [ "$IS_MAGENTO" == "true" ]; then
    if [ ! -e "${FOLDER}/src/app/etc/env.php" ]; then
        init-magento-env "${FOLDER}"
    fi

    if [ -n "$DATABASE" ]; then
        spin 'Magento setup' & pid=$!
        mgt ca:f
        mgt deploy:mode:set developer
        mgt s:up
        kill ${pid}
        spin 'Magento indexing' & pid=$!
        mgt in:rei
        kill ${pid}
    fi
fi

echo "Done"
